#pragma once
#include <stdlib.h>
#include <stdbool.h>

/**
 * Represents a node in the generated strings stack. This stack can be replaced
 * with the pNode struct defined in ptrstack.h.
 */
typedef struct sPtr {
	char* p;			///< pointer to a string that is dynamically allocated.
	struct sPtr *prev;  ///< pointer to the previous node in the stack.
} sPtr;

/**
 * Represents a character in a stack, the stack can be generated into a string
 * with the ssStr function. This stack is pretty useless since you can resize
 * dynamically allocated strings with mwrealloc().
 */
typedef struct ssChar {
	char c;					///< the character stored in this node.
	struct ssChar *prev;	///< a pointer to the previous node in the stack.
} ssChar;

/**
 * The number of elements in a stack. This is used to find the length of the
 * string representation of a stack. If used to allocate memory, remember to
 * add a character for the NUL character.
 *
 * @param top a pointer to the top element of the stack.
 * @return the length if the string representation of the stack.
 */
int ssLen(ssChar *top);
/**
 * Converts the stack into a C style string. The function automatically stores
 * a reference to the allocated memory and can be freed by spCleanup(). The
 * strings generated by this function should not be deallocated and will cause
 * a SIGSEGV when calling spCleanup() if you did not set the reference in the
 * stack referenced in spTop to NULL.
 *
 * @param top a pointer to the top element of the stack.
 * @return a pointer to the generated string.
 */
char *ssStr(ssChar *top);

/**
 * Pushes a character into a string stack.
 *
 * @param c the character to push to the stack.
 * @param top a pointer to the top element of the stack.
 * @return the pointer to the new top element of the stack.
 */
ssChar *ssPush(char c, ssChar *top);
/**
 * Pops a chacter from a string stack.
 *
 * @param top a pointer to the top element of the stack.
 * @return the pointer to the new top element of the stack.
 */
ssChar *ssPop(ssChar *top);
/**
 * Gets the first element in a stack.
 *
 * @param top a pointer to the top element of the stack.
 * @return the pointer to the first element of the stack.
 */
ssChar *ssRoot(ssChar *top);

/**
 * Deallocates and destroys a stack. This function also deallocates the root
 * element of a stack.
 *
 * @param top a pointer to the top element of the stack.
 */
void ssDestroy(ssChar *top);
/**
 * Deallocates memory allocated by strings referenced in the spTop stack. This
 * contains strings generated with the ssStr function.
 *
 * If a reference in the spTop stack is set to NULL, then that node will be
 * skipped. If a referenced memory location is already reallocated or freed,
 * then the reference stored in the spTop stack should be updated or set to
 * NULL. If the reference is not updated, calling this function will result in
 * a SIGSEGV.
 */
void ssCleanup();

/**
 * Initializes the stack used to track generated strings.
 */
void spInit();
/**
 * Pushes a reference to a dynamically allocated string.
 *
 * @param c a pointer to a dynamically allocated string.
 */
void spPush(char *c);
/**
 * Pops a reference to a dynamically allocated string.
 */
void spPop();

/**
 * Deallocates memory used by the stack used to track dynamically allocated
 * strings.
 */
void spCleanup();
/**
 * Destroys stack used to track dynamically allocated strings. The function
 * will deallocate generated strings referenced in the stack before destroying
 * itself.
 */
void spDestroy();
